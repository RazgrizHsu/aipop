#!/usr/bin/env python3

import os
import sys
import shutil
import subprocess
import tempfile
import re
from pathlib import Path
from datetime import datetime

SCHEME = "AIPop"
CONFIGURATION = "Debug"
PROJECT_NAME = f"{SCHEME}.xcodeproj"
BUILD_DIR = "build"
DESTINATION = "generic/platform=macos"
PATH_INSTALL = "/Applications/raz/"

verbose = False

def log(msg, force=False):
	if verbose or force:
		print(msg)

def err(msg):
	print(f"Error: {msg}", file=sys.stderr)
	sys.exit(1)

def run(cmd, quiet=True):
	log(f"執行: {' '.join(cmd) if isinstance(cmd, list) else cmd}")
	result = subprocess.run(
		cmd,
		shell=isinstance(cmd, str),
		capture_output=quiet,
		text=True
	)
	if result.returncode != 0:
		if quiet and result.stderr:
			log(result.stderr)
		return None
	return result.stdout.strip() if quiet else ""

def incVer(ver):
	parts = ver.split('.')
	parts[-1] = str(int(parts[-1]) + 1)
	return '.'.join(parts)

def main():
	global verbose

	args = sys.argv[1:]
	upVer = False
	newVer = ""
	pubRelease = False
	installApp = False
	destPath = ""

	i = 0
	while i < len(args):
		arg = args[i]
		if arg == "--verbose":
			verbose = True
		elif arg == "--ver":
			upVer = True
			if i + 1 < len(args) and re.match(r'^\d+\.\d+\.\d+$', args[i + 1]):
				newVer = args[i + 1]
				i += 1
		elif arg == "--pub":
			pubRelease = True
		elif arg == "--install":
			installApp = True
			destPath = "/Applications"
		i += 1

	for zf in Path(BUILD_DIR).glob("*.zip"):
		zf.unlink()

	if pubRelease:
		if not shutil.which("gh"):
			err("gh not found, please install GitHub CLI")
		if run("gh auth status") is None:
			err("Not logged in to GitHub, run 'gh auth login'")

	print("Stage 1: Update version")
	out = run("agvtool next-version -all")
	if out is None:
		err("Failed to update build number")
	log(out)

	curVer = run("agvtool what-marketing-version -terse1")
	if not curVer:
		err("Failed to get current version")

	if upVer:
		newVer = newVer or incVer(curVer)
		out = run(f"agvtool new-marketing-version {newVer}")
		if out is None:
			err("Failed to update version")
		log(out)
		print(f"Version updated: {curVer} → {newVer}")
	else:
		newVer = curVer
		print(f"Current version: {newVer}")

	print("Stage 2: Build project")
	cmd = [
		"xcodebuild",
		"-project", PROJECT_NAME,
		"-scheme", SCHEME,
		"-configuration", CONFIGURATION,
		"-destination", DESTINATION,
		"-derivedDataPath", BUILD_DIR
	]

	result = subprocess.run(cmd, capture_output=not verbose, text=True)
	if result.returncode != 0:
		if not verbose and result.stdout:
			print(result.stdout)
		err("Build failed")

	log(result.stdout)

	appPath = None
	for p in Path(BUILD_DIR).rglob(f"{SCHEME}.app"):
		appPath = p
		break

	if not appPath:
		err(".app not found")

	print(f"Build complete: {appPath}")

	plist = appPath / "Contents/Info.plist"
	ver = run(["/usr/libexec/PlistBuddy", "-c", "Print CFBundleShortVersionString", str(plist)])
	if not ver:
		err("Version not found")
	print(f"App version: {ver}")

	if Path(PATH_INSTALL).exists():
		print("Stage 3: Auto install")
		tgt = Path(PATH_INSTALL) / f"{SCHEME}.app"
		if tgt.exists():
			log(f"Terminating {SCHEME}")
			subprocess.run(["pkill", "-f", SCHEME], stderr=subprocess.DEVNULL)
			subprocess.run(["sleep", "1"])
			shutil.rmtree(tgt)

		shutil.copytree(appPath, tgt)
		print(f"Installed to {PATH_INSTALL}")
		print(f"Launching {SCHEME}")
		subprocess.Popen(["open", str(tgt)])

	if installApp:
		print(f"Stage 4: Install to {destPath}")
		dest = Path(destPath)
		dest.mkdir(parents=True, exist_ok=True)
		tgt = dest / f"{SCHEME}.app"
		if tgt.exists():
			shutil.rmtree(tgt)
		shutil.copytree(appPath, tgt)
		print(f"Installed to {destPath}")

	print("Stage 5: Create zip")
	tmpDir = tempfile.mkdtemp()
	log(f"Temp dir: {tmpDir}")
	tmpApp = Path(tmpDir) / f"{SCHEME}.app"
	shutil.copytree(appPath, tmpApp)

	zipFile = f"{SCHEME}.{ver}.zip"
	result = subprocess.run(
		["7z", "a", "-tzip", "-mx9", zipFile, f"{SCHEME}.app"],
		cwd=tmpDir,
		capture_output=not verbose
	)

	if result.returncode != 0:
		shutil.rmtree(tmpDir)
		err("Compression failed")

	shutil.move(Path(tmpDir) / zipFile, zipFile)
	shutil.rmtree(tmpDir)
	print(f"Created: {zipFile}")

	if pubRelease:
		print("Stage 6: Publish to GitHub")
		tag = f"v{ver}"
		title = f"Release {ver}"

		latestTag = run("git describe --tags --abbrev=0")
		if latestTag:
			rng = f"{latestTag}..HEAD"
			log(f"Commits since {latestTag}")
		else:
			rng = "HEAD~10..HEAD"
			log("No tags found, using last 10 commits")

		commits = run(f"git log --oneline --no-merges {rng}")
		if not commits:
			commits = "- No new commits"
		else:
			commits = "\n".join(f"- {line}" for line in commits.split("\n"))

		notes = f"""Release {ver}

Built with Xcode on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Changes
{commits}

## Download
- Download the zip file and extract to get AIPop.app
- Move AIPop.app to Applications folder"""

		if run(f"git rev-parse {tag}") is not None:
			log(f"Tag {tag} exists, deleting")
			run(f"git tag -d {tag}")
			run(f"git push origin --delete {tag}")
			run(f"gh release delete {tag} --yes")

		run(f"git tag -a {tag} -m 'Release {ver}'")
		run(f"git push origin {tag}")

		result = subprocess.run(
			["gh", "release", "create", tag, "--title", title, "--notes", notes, zipFile],
			capture_output=not verbose
		)

		if result.returncode != 0:
			err("Publish failed")

		print(f"Published {tag} to GitHub")

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print("\nInterrupted")
		sys.exit(1)
