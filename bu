#!/bin/bash

SCHEME="AIPop"
CONFIGURATION="Debug"
PROJECT_NAME="$SCHEME.xcodeproj"
BUILD_DIR="build"
DESTINATION="generic/platform=macos"

rm -rf build/*.zip

# Function to increment version
increment_version() {
    local version=$1
    local delimiter=.
    local array=($(echo "$version" | tr $delimiter '\n'))
    array[$((${#array[@]} - 1))]=$((${array[$((${#array[@]} - 1))]} + 1))
    echo $(local IFS=$delimiter ; echo "${array[*]}")
}

# Parse arguments
NEW_VERSION=""
DEST_PATH=""
UPDATE_VER=false

for ARG in "$@"; do
    if [[ $ARG == "--ver" ]]; then
        UPDATE_VER=true
    elif [[ $ARG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        NEW_VERSION=$ARG
        UPDATE_VER=true
    elif [[ $ARG =~ ^/.* ]]; then
        DEST_PATH=$ARG
        if [[ $DEST_PATH == /app/* ]]; then
            DEST_PATH="/Applications/${DEST_PATH:5}"
        fi
    fi
done

# Increment build number
agvtool next-version -all
if [ $? -eq 0 ]; then
    echo "Build number incremented successfully."
else
    echo "Failed to increment build number."
    exit 1
fi

# Handle version update
CURRENT_VERSION=$(agvtool what-marketing-version -terse1)
if [ -z "$CURRENT_VERSION" ]; then
    echo "Failed to get current marketing version."
    exit 1
fi

if [ "$UPDATE_VER" = true ]; then
    if [ -z "$NEW_VERSION" ]; then
        NEW_VERSION=$(increment_version "$CURRENT_VERSION")
    fi
    agvtool new-marketing-version $NEW_VERSION
    if [ $? -eq 0 ]; then
        echo "Updated marketing version to $NEW_VERSION."
    else
        echo "Failed to update marketing version."
        exit 1
    fi
else
    NEW_VERSION=$CURRENT_VERSION
fi

# Build the project
xcodebuild -project "$PROJECT_NAME" -scheme "$SCHEME" -configuration "$CONFIGURATION" -destination "$DESTINATION" -derivedDataPath "$BUILD_DIR"

APP_PATH=$(find "$BUILD_DIR" -name "$SCHEME.app" -print -quit)
if [ -z "$APP_PATH" ]; then
    echo "not found .app"
    exit 1
else
    echo "build success, app path: $APP_PATH"
fi

VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Contents/Info.plist")
if [ -z "$VERSION" ]; then
    echo "not found version number"
    exit 1
else
    echo "version number: $VERSION"
fi

# Copy app if destination is specified
if [ -n "$DEST_PATH" ]; then
    if [ -d "$DEST_PATH" ]; then
        rm -rf "$DEST_PATH/$SCHEME.app"
    fi
    cp -R "$APP_PATH" "$DEST_PATH"
    if [ $? -eq 0 ]; then
        echo "App copied to $DEST_PATH successfully."
    else
        echo "Failed to copy app to $DEST_PATH."
        exit 1
    fi
fi

# Create zip file
TEMP_DIR=$(mktemp -d)
cp -R "$APP_PATH" "$TEMP_DIR"
echo "tmpdir: $TEMP_DIR"
ZIP_FILE="${SCHEME}.${VERSION}.zip"
cd "$TEMP_DIR"
7z a -tzip -mx9 "$ZIP_FILE" "$SCHEME.app"
if [ $? -eq 0 ]; then
    mv "$ZIP_FILE" "$OLDPWD"
    echo "compression success, zip file: $OLDPWD/$ZIP_FILE"
else
    echo "compression failed"
    cd -
    rm -rf "$TEMP_DIR"
    exit 1
fi
cd -
rm -rf "$TEMP_DIR"
